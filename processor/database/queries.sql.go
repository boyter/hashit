// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const fileHashByFilePath = `-- name: FileHashByFilePath :one
select filepath, crc32, xxhash64, md4, md5, sha1, sha256, sha512, blake2b_256, blake2b_512, blake3, sha3_224, sha3_256, sha3_384, sha3_512, size from file_hashes where filepath = ?
`

func (q *Queries) FileHashByFilePath(ctx context.Context, filepath string) (FileHash, error) {
	row := q.db.QueryRowContext(ctx, fileHashByFilePath, filepath)
	var i FileHash
	err := row.Scan(
		&i.Filepath,
		&i.Crc32,
		&i.Xxhash64,
		&i.Md4,
		&i.Md5,
		&i.Sha1,
		&i.Sha256,
		&i.Sha512,
		&i.Blake2b256,
		&i.Blake2b512,
		&i.Blake3,
		&i.Sha3224,
		&i.Sha3256,
		&i.Sha3384,
		&i.Sha3512,
		&i.Size,
	)
	return i, err
}

const fileHashInsertReplace = `-- name: FileHashInsertReplace :one

insert or replace into file_hashes (
    filepath, crc32, xxhash64, md4, md5, sha1, sha256, sha512,
    blake2b_256, blake2b_512, blake3, sha3_224, sha3_256, sha3_384, sha3_512,
    size
) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
returning filepath, crc32, xxhash64, md4, md5, sha1, sha256, sha512, blake2b_256, blake2b_512, blake3, sha3_224, sha3_256, sha3_384, sha3_512, size
`

type FileHashInsertReplaceParams struct {
	Filepath   string
	Crc32      sql.NullString
	Xxhash64   sql.NullString
	Md4        sql.NullString
	Md5        sql.NullString
	Sha1       sql.NullString
	Sha256     sql.NullString
	Sha512     sql.NullString
	Blake2b256 sql.NullString
	Blake2b512 sql.NullString
	Blake3     sql.NullString
	Sha3224    sql.NullString
	Sha3256    sql.NullString
	Sha3384    sql.NullString
	Sha3512    sql.NullString
	Size       int64
}

// SPDX-License-Identifier: MIT
func (q *Queries) FileHashInsertReplace(ctx context.Context, arg FileHashInsertReplaceParams) (FileHash, error) {
	row := q.db.QueryRowContext(ctx, fileHashInsertReplace,
		arg.Filepath,
		arg.Crc32,
		arg.Xxhash64,
		arg.Md4,
		arg.Md5,
		arg.Sha1,
		arg.Sha256,
		arg.Sha512,
		arg.Blake2b256,
		arg.Blake2b512,
		arg.Blake3,
		arg.Sha3224,
		arg.Sha3256,
		arg.Sha3384,
		arg.Sha3512,
		arg.Size,
	)
	var i FileHash
	err := row.Scan(
		&i.Filepath,
		&i.Crc32,
		&i.Xxhash64,
		&i.Md4,
		&i.Md5,
		&i.Sha1,
		&i.Sha256,
		&i.Sha512,
		&i.Blake2b256,
		&i.Blake2b512,
		&i.Blake3,
		&i.Sha3224,
		&i.Sha3256,
		&i.Sha3384,
		&i.Sha3512,
		&i.Size,
	)
	return i, err
}
